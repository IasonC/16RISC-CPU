$date
	Mon Feb 28 20:30:05 2022
$end
$version
	Icarus Verilog
$end
$timescale
	1ps
$end
$scope module reg_file_alu_tb $end
$var wire 8 ! ALUResult [7:0] $end
$var reg 2 " ALUControl [1:0] $end
$var reg 1 # ALUSrc $end
$var reg 4 $ RA1 [3:0] $end
$var reg 4 % RA2 [3:0] $end
$var reg 1 & RegWrite $end
$var reg 4 ' WA [3:0] $end
$var reg 1 ( clk $end
$var reg 8 ) external_data_in [7:0] $end
$scope module dut $end
$var wire 2 * ALUControl [1:0] $end
$var wire 1 # ALUSrc $end
$var wire 4 + RA1 [3:0] $end
$var wire 4 , RA2 [3:0] $end
$var wire 1 & RegWrite $end
$var wire 4 - WA [3:0] $end
$var wire 1 ( clk $end
$var wire 8 . external_data_in [7:0] $end
$var wire 8 / SrcMux [7:0] $end
$var wire 8 0 SrcB [7:0] $end
$var wire 8 1 SrcA [7:0] $end
$var wire 8 2 ALUResult [7:0] $end
$var reg 1 3 reset $end
$scope module alu $end
$var wire 2 4 ALUControl [1:0] $end
$var wire 8 5 b [7:0] $end
$var wire 8 6 a [7:0] $end
$var reg 8 7 ALUResult [7:0] $end
$upscope $end
$scope module reg_file $end
$var wire 4 8 RA1 [3:0] $end
$var wire 4 9 RA2 [3:0] $end
$var wire 4 : WA [3:0] $end
$var wire 1 ( clk $end
$var wire 8 ; data_in [7:0] $end
$var wire 8 < data_out1 [7:0] $end
$var wire 8 = data_out2 [7:0] $end
$var wire 1 3 reset $end
$var wire 1 & write_enable $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
bx =
bx <
b0 ;
b1111 :
bx 9
bx 8
b0 7
bx 6
b0 5
b0 4
x3
b0 2
bx 1
b0 0
bx /
b0 .
b1111 -
bx ,
bx +
b0 *
b0 )
1(
b1111 '
1&
bx %
bx $
1#
b0 "
b0 !
$end
#10000
0(
#20000
1(
#25000
b11111111 !
b11111111 2
b11111111 7
b11111111 ;
b11111111 0
b11111111 5
b11111111 )
b11111111 .
b0 1
b0 6
b0 <
b1111 $
b1111 +
b1111 8
b1 "
b1 *
b1 4
#30000
0(
#40000
b11111111 1
b11111111 6
b11111111 <
1(
#45000
b11001110 !
b11001110 2
b11001110 7
b11001110 ;
b11001110 0
b11001110 5
b11001110 )
b11001110 .
b0 "
b0 *
b0 4
#50000
0(
#54000
b1 !
b1 2
b1 7
b1 ;
b1 0
b1 5
b1 )
b1 .
#55000
b11111111 !
b11111111 2
b11111111 7
b11111111 ;
b0 0
b0 5
b1 "
b1 *
b1 4
b0 )
b0 .
#60000
1(
#70000
0(
#75000
b0 !
b0 2
b0 7
b0 ;
b10 '
b10 -
b10 :
b0 "
b0 *
b0 4
#80000
1(
#85000
b11011100 !
b11011100 2
b11011100 7
b11011100 ;
b11011100 0
b11011100 5
b11011100 )
b11011100 .
b1 "
b1 *
b1 4
b0 1
b0 6
b0 <
b10 $
b10 +
b10 8
#90000
0(
#100000
b11011100 1
b11011100 6
b11011100 <
1(
#105000
b1010110 !
b1010110 2
b1010110 7
b1010110 ;
b1010110 0
b1010110 5
b0 "
b0 *
b0 4
b1010110 )
b1010110 .
b11111111 1
b11111111 6
b11111111 <
b1111 $
b1111 +
b1111 8
b1111 '
b1111 -
b1111 :
#110000
0(
#120000
b1010110 1
b1010110 6
b1010110 <
1(
#125000
b1010100 !
b1010100 2
b1010100 7
b1010100 ;
0#
b11011100 1
b11011100 6
b11011100 <
b10 $
b10 +
b10 8
b1010110 /
b1010110 =
b1111 %
b1111 ,
b1111 9
#128000
b11011110 !
b11011110 2
b11011110 7
b11011110 ;
b1 "
b1 *
b1 4
#130000
b110010 !
b110010 2
b110010 7
b110010 ;
b10 "
b10 *
b10 4
0(
#132000
b10000110 !
b10000110 2
b10000110 7
b10000110 ;
b11 "
b11 *
b11 4
#133000
b0 !
b0 2
b0 7
b0 ;
b0 0
b0 5
b0 )
b0 .
b0 "
b0 *
b0 4
1#
b110 '
b110 -
b110 :
#140000
1(
#143000
b11111111 !
b11111111 2
b11111111 7
b11111111 ;
b11111111 0
b11111111 5
b11111111 )
b11111111 .
b1 "
b1 *
b1 4
0&
b0 1
b0 6
b0 <
b110 $
b110 +
b110 8
#150000
0(
#160000
1(
#163000
b0 !
b0 2
b0 7
b0 ;
b10010 0
b10010 5
b0 "
b0 *
b0 4
b10010 )
b10010 .
#170000
0(
#174000
